{"remainingRequest":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/src/layout/components/NavBar/Breadcrumb.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/src/layout/components/NavBar/Breadcrumb.vue","mtime":1569321374712},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pathToRegexp from 'path-to-regexp'\nexport default {\n    name: 'Breadcrumb',\n    data(){\n        return {\n            levelList: null\n        }\n    },\n    created(){\n        this.getBreadcrumb()\n    },\n    watch:{\n        $route(route){\n            if(route.path.startsWith('/redirect/')){\n                return\n            }\n            this.getBreadcrumb()\n        }\n    },\n    methods: {\n        getBreadcrumb(){\n            let matched = this.$route.matched.filter(item => item.meta && item.meta.title)\n            const first = matched[0]\n            if(!this.isDashboard(first)){\n                matched = [{path: '/', meta: {title: 'Home'}}].concat(matched);\n            }\n            this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb != false)\n        },\n        isDashboard(route){\n            const name = route && route.name\n            if(!name){\n                return false\n            }\n            return name.trim().toLocaleLowerCase() === 'Dashboard'.toLocaleLowerCase()\n        },\n        handleLink(item){\n            const {redirect, path} = item;\n            if(redirect){\n                this.$router.push(redirect);\n                return\n            }\n            this.$router.push(this.pathCompile(path))\n        },\n        pathCompile(path){\n            const {params} = this.$route;\n            const toPath = pathToRegexp.compile(path);\n            return toPath(params);\n        }\n    }\n}\n",{"version":3,"sources":["Breadcrumb.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Breadcrumb.vue","sourceRoot":"src/layout/components/NavBar","sourcesContent":["<template>\n    <el-breadcrumb class=\"app-breadcrumb\" separator=\"/\">\n        <transition-group name=\"breadcrumb\">\n            <el-breadcrumb-item v-for=\"(item, index) in levelList\" :key=\"item.path\">\n                <span v-if=\"item.redirect == 'noRedirect' || index == levelList.length - 1\" class=\"no-redirect\">{{item.meta.title}}</span>\n                <a v-else @click.prevent=\"handleLink(item)\">{{item.meta.title}}</a>\n            </el-breadcrumb-item>\n        </transition-group>\n    </el-breadcrumb>\n</template>\n\n<script>\n    import pathToRegexp from 'path-to-regexp'\n    export default {\n        name: 'Breadcrumb',\n        data(){\n            return {\n                levelList: null\n            }\n        },\n        created(){\n            this.getBreadcrumb()\n        },\n        watch:{\n            $route(route){\n                if(route.path.startsWith('/redirect/')){\n                    return\n                }\n                this.getBreadcrumb()\n            }\n        },\n        methods: {\n            getBreadcrumb(){\n                let matched = this.$route.matched.filter(item => item.meta && item.meta.title)\n                const first = matched[0]\n                if(!this.isDashboard(first)){\n                    matched = [{path: '/', meta: {title: 'Home'}}].concat(matched);\n                }\n                this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb != false)\n            },\n            isDashboard(route){\n                const name = route && route.name\n                if(!name){\n                    return false\n                }\n                return name.trim().toLocaleLowerCase() === 'Dashboard'.toLocaleLowerCase()\n            },\n            handleLink(item){\n                const {redirect, path} = item;\n                if(redirect){\n                    this.$router.push(redirect);\n                    return\n                }\n                this.$router.push(this.pathCompile(path))\n            },\n            pathCompile(path){\n                const {params} = this.$route;\n                const toPath = pathToRegexp.compile(path);\n                return toPath(params);\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    .app-breadcrumb.el-breadcrumb {\n        display: inline-block;\n        font-size: 14px;\n        line-height: 50px;\n        margin-left: 8px;\n\n        .no-redirect {\n            color: #97a8be;\n            cursor: text;\n        }\n    }\n</style>\n"]}]}