{"remainingRequest":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/src/layout/components/TagsView/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/src/layout/components/TagsView/index.vue","mtime":1569391460918},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/WebstormProjects/vue-demo/erp-web/erp-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ScrollPane from './ScrollPane'\nimport path from 'path'\nexport default {\n    components:{\n        ScrollPane\n    },\n    computed:{\n        visitedViews(){\n            return this.$store.state.tagsView.visitedViews()\n        },\n        routes(){\n            return this.$store.state.permission.routes\n        }\n    },\n    data(){\n        return {\n            visible: false,\n            top: 0,\n            left: 0,\n            selectedTag: {},\n            affixTags: []\n        }\n    },\n    mounted(){\n        this.initTags();\n        this.addTags();\n    },\n    methods: {\n        isActive(route){\n            return this.$route.path == route.path\n        },\n        initTags(){\n            const affixTags = this.affixTags = this.filterAffixTag(this.routes)\n            for(const tag of affixTags){\n                if(tag.name){\n                    this.$store.dispatch('tagsView/addVisitedView', tag);\n                }\n            }\n        },\n        addTags(){\n            if(this.$route.name){\n                this.$store.dispatch('/tagsView/addView', this.$route)\n            }\n        },\n        filterAffixTag(routes, basePath = '/'){\n            let tags = []\n            this.routes.forEach(route => {\n                if(route.meta && route.meta.affix){\n                    const tagPath = path.resolve(basePath, route.path);\n                    tags.push({\n                        fullPath: tagPath,\n                        path: tagPath,\n                        name: route.name,\n                        meta: {...route.meta}\n                    })\n                }\n                if(route.children){\n                    const tempTags = this.filterAffixTag(route.children, route.path)\n                    if(tempTags.length > 0){\n                        tags = [...tags, ...tempTags]\n                    }\n                }\n            })\n            return tags;\n        },\n        moveToCurrentTag(){\n            const tags = this.$refs.tag;\n            this.$nextTick(() => {\n                for(const tag of tags){\n                    if(tag.to.path == this.$route.path){\n                        this.$refs.scrollPane.moveToTarget(tag);\n                        if(tag.to.fullPath != this.$route.fullPath){\n                            this.$store.dispatch('tagsView/updateVisitedView', this.$route)\n                        }\n                    }\n                }\n            })\n        },\n        refreshSelectedTag(view){\n            this.$store.dispatch('tagsView/updateVisitedView', view).then(()=>{\n                const {fullPath} = view;\n                this.$nextTick(() => {\n                    this.$router.replace({\n                        path: '/redirect' + fullPath\n                    })\n                })\n            })\n        },\n        closeSelectedTag(view){\n            this.$store.dispatch('tagsView/delView', view).then(() => {\n                if(this.isActive(view)){\n                    this.toLastView(this.visitedViews, view)\n                }\n            })\n        },\n        closeOtherTags(){\n            this.$router.push(this.selectedTag)\n            this.$store.dispatch('tagsView/delOthersViews', this.selectedTag).then(() => {\n                this.moveToCurrentTag()\n            })\n        },\n        closeAllTags(view){\n            this.$store.dispatch('tagsView/delAllViews').then((visitedViews) => {\n                if(this.affixTags.some(tag=>tag.path == view.path)){\n                    return\n                }\n                this.toLastView(visitedViews, view)\n            })\n        },\n        toLastView(visitedViews, view){\n            const lastView = visitedViews.slice(-1)[0]\n            if(lastView){\n                this.$router.push(lastView)\n            } else {\n                if(view.name == 'Dashboard'){\n                    this.$router.replace({path: '/redirect' + view.fullPath})\n                } else {\n                    this.$router.push('/')\n                }\n            }\n        },\n        openMenu(tag, e){\n            const menuMinWidth = 105\n            const offsetLeft = this.$el.getBoundingClientRect().left\n            const offsetWidth = this.$el.offsetWidth\n            const maxLeft = offsetWidth - menuMinWidth\n            const left = e.clientX - offsetWidth + 15\n\n            if(left > maxLeft){\n                this.left = maxLeft\n            } else {\n                this.left = left;\n            }\n\n            this.top = e.clientY\n            this.visible = true\n            this.selectedTag = tag;\n        },\n        closeMenu(){\n            this.visible = false\n        }\n    }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/layout/components/TagsView","sourcesContent":["<template>\n    <div id=\"tags-view_container\" class=\"tags-view-container\">\n        <scroll-pane ref=\"scrollPane\" class=\"tags-view-wrapper\">\n            <router-link\n                v-for=\"tag in visitedViews\"\n                ref=\"tag\"\n                :key=\"tag.path\"\n                :class=\"isActive(tag)?'active': ''\"\n                :to=\"{path: tag.path, query:tag.query, fullPath: tag.fullPath}\"\n                tag=\"span\"\n                class=\"tags-view-item\"\n                @click.middle.native=\"closeSelectedTag(tag)\"\n                @contextmenu.prevent.native=\"openMenu(tag, event)\"\n            >\n                {{tag.title}}\n                <span v-if=\"!tag.meta.affix\" class=\"el-icon-close\" @click.prevent.stop=\"closeSelectedTag(tag)\"></span>\n            </router-link>\n        </scroll-pane>\n\n        <ul v-show=\"visible\" :style=\"{left: left + 'px', top: top + 'px'}\" class=\"contextmenu\">\n            <li @click=\"refreshSelectedTag(selectedTag)\">刷新</li>\n            <li v-if=\"!(selectedTag.meta && selectedTag.meta.suffix)\" @click=\"closeSelectedTag(selectedTag)\">关闭</li>\n            <li @click=\"closeOthersTags\">关闭其他</li>\n            <li @click=\"closeAllTags(selectedTag)\">关闭所有</li>\n        </ul>\n    </div>\n</template>\n<script>\n    import ScrollPane from './ScrollPane'\n    import path from 'path'\n    export default {\n        components:{\n            ScrollPane\n        },\n        computed:{\n            visitedViews(){\n                return this.$store.state.tagsView.visitedViews()\n            },\n            routes(){\n                return this.$store.state.permission.routes\n            }\n        },\n        data(){\n            return {\n                visible: false,\n                top: 0,\n                left: 0,\n                selectedTag: {},\n                affixTags: []\n            }\n        },\n        mounted(){\n            this.initTags();\n            this.addTags();\n        },\n        methods: {\n            isActive(route){\n                return this.$route.path == route.path\n            },\n            initTags(){\n                const affixTags = this.affixTags = this.filterAffixTag(this.routes)\n                for(const tag of affixTags){\n                    if(tag.name){\n                        this.$store.dispatch('tagsView/addVisitedView', tag);\n                    }\n                }\n            },\n            addTags(){\n                if(this.$route.name){\n                    this.$store.dispatch('/tagsView/addView', this.$route)\n                }\n            },\n            filterAffixTag(routes, basePath = '/'){\n                let tags = []\n                this.routes.forEach(route => {\n                    if(route.meta && route.meta.affix){\n                        const tagPath = path.resolve(basePath, route.path);\n                        tags.push({\n                            fullPath: tagPath,\n                            path: tagPath,\n                            name: route.name,\n                            meta: {...route.meta}\n                        })\n                    }\n                    if(route.children){\n                        const tempTags = this.filterAffixTag(route.children, route.path)\n                        if(tempTags.length > 0){\n                            tags = [...tags, ...tempTags]\n                        }\n                    }\n                })\n                return tags;\n            },\n            moveToCurrentTag(){\n                const tags = this.$refs.tag;\n                this.$nextTick(() => {\n                    for(const tag of tags){\n                        if(tag.to.path == this.$route.path){\n                            this.$refs.scrollPane.moveToTarget(tag);\n                            if(tag.to.fullPath != this.$route.fullPath){\n                                this.$store.dispatch('tagsView/updateVisitedView', this.$route)\n                            }\n                        }\n                    }\n                })\n            },\n            refreshSelectedTag(view){\n                this.$store.dispatch('tagsView/updateVisitedView', view).then(()=>{\n                    const {fullPath} = view;\n                    this.$nextTick(() => {\n                        this.$router.replace({\n                            path: '/redirect' + fullPath\n                        })\n                    })\n                })\n            },\n            closeSelectedTag(view){\n                this.$store.dispatch('tagsView/delView', view).then(() => {\n                    if(this.isActive(view)){\n                        this.toLastView(this.visitedViews, view)\n                    }\n                })\n            },\n            closeOtherTags(){\n                this.$router.push(this.selectedTag)\n                this.$store.dispatch('tagsView/delOthersViews', this.selectedTag).then(() => {\n                    this.moveToCurrentTag()\n                })\n            },\n            closeAllTags(view){\n                this.$store.dispatch('tagsView/delAllViews').then((visitedViews) => {\n                    if(this.affixTags.some(tag=>tag.path == view.path)){\n                        return\n                    }\n                    this.toLastView(visitedViews, view)\n                })\n            },\n            toLastView(visitedViews, view){\n                const lastView = visitedViews.slice(-1)[0]\n                if(lastView){\n                    this.$router.push(lastView)\n                } else {\n                    if(view.name == 'Dashboard'){\n                        this.$router.replace({path: '/redirect' + view.fullPath})\n                    } else {\n                        this.$router.push('/')\n                    }\n                }\n            },\n            openMenu(tag, e){\n                const menuMinWidth = 105\n                const offsetLeft = this.$el.getBoundingClientRect().left\n                const offsetWidth = this.$el.offsetWidth\n                const maxLeft = offsetWidth - menuMinWidth\n                const left = e.clientX - offsetWidth + 15\n\n                if(left > maxLeft){\n                    this.left = maxLeft\n                } else {\n                    this.left = left;\n                }\n\n                this.top = e.clientY\n                this.visible = true\n                this.selectedTag = tag;\n            },\n            closeMenu(){\n                this.visible = false\n            }\n        }\n    }\n</script>\n\n\n<style lang=\"scss\" scoped>\n    .tags-view-container {\n        height: 34px;\n        width: 100%;\n        background: #fff;\n        border-bottom: 1px solid #d8dce5;\n        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, .12), 0 0 3px 0 rgba(0, 0, 0, .04);\n        .tags-view-wrapper {\n            .tags-view-item {\n                display: inline-block;\n                position: relative;\n                cursor: pointer;\n                height: 26px;\n                line-height: 26px;\n                border: 1px solid #d8dce5;\n                color: #495060;\n                background: #fff;\n                padding: 0 8px;\n                font-size: 12px;\n                margin-left: 5px;\n                margin-top: 4px;\n                &:first-of-type {\n                    margin-left: 15px;\n                }\n                &:last-of-type {\n                    margin-right: 15px;\n                }\n                &.active {\n                    background-color: #42b983;\n                    color: #fff;\n                    border-color: #42b983;\n                    &::before {\n                        content: '';\n                        background: #fff;\n                        display: inline-block;\n                        width: 8px;\n                        height: 8px;\n                        border-radius: 50%;\n                        position: relative;\n                        margin-right: 2px;\n                    }\n                }\n            }\n        }\n        .contextmenu {\n            margin: 0;\n            background: #fff;\n            z-index: 3000;\n            position: absolute;\n            list-style-type: none;\n            padding: 5px 0;\n            border-radius: 4px;\n            font-size: 12px;\n            font-weight: 400;\n            color: #333;\n            box-shadow: 2px 2px 3px 0 rgba(0, 0, 0, .3);\n            li {\n                margin: 0;\n                padding: 7px 16px;\n                cursor: pointer;\n                &:hover {\n                    background: #eee;\n                }\n            }\n        }\n    }\n</style>\n\n<style lang=\"scss\">\n    //reset element css of el-icon-close\n    .tags-view-wrapper {\n        .tags-view-item {\n            .el-icon-close {\n                width: 16px;\n                height: 16px;\n                vertical-align: 2px;\n                border-radius: 50%;\n                text-align: center;\n                transition: all .3s cubic-bezier(.645, .045, .355, 1);\n                transform-origin: 100% 50%;\n                &:before {\n                    transform: scale(.6);\n                    display: inline-block;\n                    vertical-align: -3px;\n                }\n                &:hover {\n                    background-color: #b4bccc;\n                    color: #fff;\n                }\n            }\n        }\n    }\n</style>\n"]}]}